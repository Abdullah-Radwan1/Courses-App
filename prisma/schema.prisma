generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String

  comments        Comment[]
  questions       Question[]
  enrolledCourses Enrollment[]
  sessions        Session[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  leaderboard      leaderboard?       @relation(fields: [leaderboardId], references: [id])
  leaderboardId    String?
  ExamResult       ExamResult[]
  LessonCompletion LessonCompletion[]
}

model Course {
  id          String       @id @default(uuid())
  instructor  String       @default("Abdullah Radwan")
  title       String
  description String
  duration    String
  language    String
  curriculums Curriculum[]
  comments    Comment[]
  enrollments Enrollment[]
  Exam        Exam[]
}

model Curriculum {
  id       String   @id @default(uuid())
  title    String   @default("course")
  period   String
  courseId String
  course   Course   @relation(fields: [courseId], references: [id])
  Lessons  Lesson[]
}

model Lesson {
  id               String             @id @default(uuid())
  period           String
  type             Type               @default(VIDEO)
  name             String
  courseId         String
  curriculumId     String
  curriculum       Curriculum         @relation(fields: [curriculumId], references: [id])
  LessonCompletion LessonCompletion[]
}

model LessonCompletion {
  id        String   @id @default(uuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  courseId  String?
  user      User     @relation(fields: [userId], references: [id])
  course    Course?  @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}

model Question {
  id        String   @id @default(cuid())
  content   String
  userId    String
  courseId  String?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

// exam models 
model Exam {
  id        String         @id @default(uuid())
  title     String
  courseId  String
  course    Course         @relation(fields: [courseId], references: [id])
  questions ExamQuestion[]
  results   ExamResult[]
  createdAt DateTime       @default(now())
}

model ExamQuestion {
  id        String       @id @default(uuid())
  text      String
  options   ExamOption[]
  correctId String?
  examId    String
  exam      Exam         @relation(fields: [examId], references: [id])
}

model ExamOption {
  id         String       @id @default(uuid())
  text       String
  questionId String
  question   ExamQuestion @relation(fields: [questionId], references: [id])
}

model ExamResult {
  id        String   @id @default(uuid())
  userId    String
  examId    String
  score     Float
  rank      Int?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  exam Exam @relation(fields: [examId], references: [id])

  @@unique([userId, examId])
}

model leaderboard {
  id        String   @id @default(cuid())
  user      User[]
  rank      Int?
  score     Float?
  courseId  String?
  createdAt DateTime @default(now())
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum Type {
  VIDEO
  PDF
  EXAM
}
